imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    registration:
            confirmation:
                enabled: true
            form:
                type: AppBundle\Form\RegistrationType
    from_email:
            address:        noreply@example.com
            sender_name:    Demo App
    service:
            mailer: fos_user.mailer.twig_swift
    resetting:
            email:
                template:   email/password_resetting.email.twig
    registration:
            confirmation:
                template:   '@FOSUser/Registration/email.txt.twig'
framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        types:
                        phone_number: Misd\PhoneNumberBundle\Doctrine\DBAL\Types\PhoneNumberType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

twig:
  cache: false
twig:
    form:
        resources: ['bootstrap_3_layout.html.twig']
hwi_oauth:
    # list of names of the firewalls in which this bundle is active, this setting MUST be set
    firewall_names: [main]

    connect:
      confirmation: true
      registration_form: fos_user.registration.form.factory
    fosub:
            username_iterations: 30
            properties:
                # these properties will be used/redefined later in the custom FOSUBUserProvider service.
                facebook: facebook_id
    resource_owners:
            facebook:
                type:                facebook
                client_id:           1876320346019698
                client_secret:       2c275703deca3d7c441c758d4ef45c9c
                scope:               "email, public_profile, user_friends, pages_messaging"
                paths:
                                    profilepicture: picture.data.url

fos_message:
    db_driver: orm
    thread_class: AppBundle\Entity\Thread
    message_class: AppBundle\Entity\Message
    new_thread_form:
      type:               FOS\MessageBundle\FormType\NewThreadMultipleMessageFormType
      handler:            fos_message.new_thread_multiple_form.handler
      model:              FOS\MessageBundle\FormModel\NewThreadMultipleMessage
      name:               message


payum:
    security:
        token_storage:
            AppBundle\Entity\PaymentToken: { doctrine: orm }

    storages:
        AppBundle\Entity\Payment: { doctrine: orm }

    gateways:
        paypal_me:
                    factory: paypal_express_checkout
                    username:  'ayoubelouahili-facilitator_api1.gmail.com'
                    password:  'DF9JA7FZ9QMGB582'
                    signature: 'AIkKNboJiyuxWLOHUlzTd3lpqCSxAiB2nDpaWPD4EwywDtDz4C75TjR3'
                    sandbox: true
        paypal_pro:
                    factory: paypal_pro_checkout
                    username:  'ayoubelouahili-facilitator_api1.gmail.com'
                    password:  'DF9JA7FZ9QMGB582'
                    partner: 'required'
                    vendor: 'required'
                    tender: C
                    trxtype: S
                    sandbox: true
        offline:
            factory: offline

nelmio_api_doc: ~

fos_rest:
    routing_loader:
        default_format: json                            # All responses should be JSON formated
        include_format: false                           # We do not include format in request, so that all responses
                                                        # will eventually be JSON formated
    format_listener:
        rules:
            - { priorities: ['json'], fallback_format: json, prefer_extension: false }
    view:
        view_response_listener: true
    access_denied_listener:
        json: true
    allowed_methods_listener: true


fos_oauth_server:
    db_driver:           orm
    client_class:        AppBundle\Entity\Client
    access_token_class:  AppBundle\Entity\AccessToken
    refresh_token_class: AppBundle\Entity\RefreshToken
    auth_code_class:     AppBundle\Entity\AuthCode
    service:
        user_provider: fos_user.user_manager.username             # This property will be used when valid credentials are given to load the user upon access token creation
        options:
                    supported_scopes: user


nelmio_cors:
        paths:
            '^/':
                origin_regex: true
                allow_origin: ['^http://localhost:[0-9]+']
                allow_headers: ['X-Custom-Auth']
                allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
                max_age: 3600
                hosts: ['^api\.']